# -*- coding: utf-8 -*-
"""StreamlitStarter_Week3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15-CwG1nq4qxK5vkk-SlvUm3_Pu8FYu6A
"""

import streamlit as st
from openai import OpenAI

# Page configuration
st.set_page_config(page_title="AI Use Case Starter", page_icon="🤖", layout="wide")

# Default prompt students can replace
default_system_prompt = """
You are an assistant that performs a specific task. Follow the user's input instructions accurately, be concise, and focus on the intended goal of the task.
"""

# Session state defaults
if "api_key" not in st.session_state:
    st.session_state.api_key = ""
if "system_prompt" not in st.session_state:
    st.session_state.system_prompt = default_system_prompt

# Sidebar: API key + prompt
with st.sidebar:
    st.title("🧠 AI Assistant Setup")
    st.text_input("🔑 OpenAI API Key", type="password", key="api_key")
    st.text_area("📝 System Prompt", key="system_prompt", height=200, help="Define your assistant's behavior here.")
    st.caption("Customize your assistant prompt above and start testing!")

# Main UI
st.title("🚀 AI Use Case Playground")
st.markdown("Paste your input below and see how your assistant responds based on your custom prompt.")

# Input area
user_input = st.text_area("💬 Your Input", height=200, placeholder="Paste your content, question, or task instruction...")

# Run interaction
if st.button("Run AI", use_container_width=True, disabled=not st.session_state.api_key or not user_input):
    try:
        client = OpenAI(api_key=st.session_state.api_key)
        with st.spinner("🤔 Thinking..."):
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": st.session_state.system_prompt},
                    {"role": "user", "content": user_input}
                ],
                temperature=0.7,
            )
            result = response.choices[0].message.content
            st.subheader("🧾 Output")
            st.write(result)

            # Copy button
            st.markdown("""
                <button
                    onclick="navigator.clipboard.writeText(document.querySelector('.stMarkdown p').innerText); this.innerText='Copied!'; setTimeout(() => this.innerText='Copy to clipboard', 2000)"
                    style="background-color:#4CAF50;color:white;border:none;padding:6px 12px;border-radius:5px;cursor:pointer;">
                    Copy to clipboard
                </button>
                """, unsafe_allow_html=True)
    except Exception as e:
        st.error(f"❌ Error: {e}")